syntax = "v1"

type LoginRequest {
	Email    string `form:"email"`
	Password string `form:"password"`
}

type RegisterRequest {
	Name     string `form:"name"`
	Email    string `form:"email"`
	Password string `form:"password"`
	Vcode    string `form:"vcode"`
}

type BaseResponse {
	Message string `json:"message"`
	Ok      bool   `json:"ok"`
}

type LoginResponse {
	BaseResponse
	Token    string `json:"token"`
	ExpireAt int64  `json:"expireAt"`
}

type RegisterResponse {
	BaseResponse
}

type LogoutRequest {
	Token string `header:"Authorization"`
}

type LogoutResponse {
	BaseResponse
}

type RegisterVcodeRequest {
	Email string `form:"email"`
}

type RegisterVcodeResponse {
	BaseResponse
}

type FileUploadResponse {
	BaseResponse
}

type FileUploadRequest {
	Parent *uint `form:"parent,optional"`
}

type CreateDirectoryResponse {
	BaseResponse
}

type DeleteFileResponse {
	BaseResponse
}

type DeleteFileRequest {
	UUID string `path:"uuid"`
}

type DeleteFilesRequest {
	UUIDs []string `form:"uuids"`
}

type DeleteFilesResponse {
	BaseResponse
}

type CreateDirectoryRequest {
	Name   string `form:"name,optional"`
	Parent *uint  `form:"parent,optional"`
}

type ShareFileRequest {
	ID       uint    `path:"id"`
	Password *string `form:"password, optional"`
	ExpireAt *int64  `form:"expireAt, optional"`
}

type ShareFileResponse {
	BaseResponse
}

type DownloadSharedFileRequest {
	UUID     string  `path:"uuid"`
	Password *string `form:"password"`
}

type DownloadSharedFileResponse {
	BaseResponse
}

type SaveSharedFileRequest {
	UUID     string  `path:"uuid"`
	Password *string `form:"password, optional"`
	Name     string  `form:"name, optional"`
}

type SaveSharedFileResponse {
	BaseResponse
}

type GetSharedFileRequest {
	UUID     string `path:"uuid"`
	Password string `form:"password, optional"`
}

type GetSharedFileResponse {
	BaseResponse
	Data *ShareDTO `json:"data"`
}

type DeleteSharedFileResponse {
	BaseResponse
}

type DeleteSharedFileRequest {
	UUID string `path:"uuid"`
}

type ShareDTO {
	ID        uint    `json:"id"`
	UUID      string  `json:"uuid"`
	ExpireAt  *int64  `json:"expireAt"`
	CreatedAt int64   `json:"createdAt"`
	UpdatedAt int64   `json:"updatedAt"`
	File      FileDTO `json:"file"`
	Username  string  `json:"username"`
	Password  *string `json:"password"`
}

type UpdateFileRequest {
	ID      uint   `path:"id"`
	Name    string `form:"name,optional"`
	Private *bool  `form:"private,optional"`
	Parent  *uint  `form:"parent,optional"`
}

type UpdateFileResponse {
	BaseResponse
}

type MoveFilesRequest {
	IDs    []uint `form:"ids"`
	Parent uint   `form:"parent"`
}

type MoveFilesResponse {
	BaseResponse
}

type FileDownloadRequest {
	UUID string `path:"uuid"`
}

type UserDTO {
	ID    uint   `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Quota int64  `json:"quota"`
	Usage int64  `json:"usage"`
}

type FileDTO {
	ID      uint   `json:"id"`
	Name    string `json:"name"`
	Ext     string `json:"ext"`
	Size    int64  `json:"size"`
	UUID    string `json:"uuid"`
	Owner   uint   `json:"owner"`
	IsDir   bool   `json:"isDir"`
	Private bool   `json:"private"`
	Parent  *uint  `json:"parent"`
}

type GetMyFileRequest {
	// parent dir uuid
	Parent     *uint    `form:"parent,optional"`
	Keyword    string   `form:"keyword,optional"`
	Extensions []string `form:"extensions,optional"`
}

type GetOneFileRequest {
	ID uint `path:"id"`
}

service disko-api {
	@handler LoginHandler
	post /api/login (LoginRequest) returns (LoginResponse)

	@handler RegisterHandler
	post /api/register (RegisterRequest) returns (RegisterResponse)

	@handler RegisterVcodeHandler
	get /api/register/vcode (RegisterVcodeRequest) returns (RegisterVcodeResponse)
}

@server(
	jwt: Auth
	middleware: CheckBlackList
)

service disko-api {
	@handler MeHandler
	get /api/me returns (UserDTO)

	@handler LogoutHandler
	put /api/logout (LogoutRequest) returns (LogoutResponse)

	@handler UpdateFileHandler
	put /api/files/:id (UpdateFileRequest) returns (UpdateFileResponse)

	@handler MoveFilesHandler
	put /api/files/move (MoveFilesRequest) returns (MoveFilesResponse)

	@handler DeleteFileHandler
	delete /api/files/:uuid (DeleteFileRequest) returns (DeleteFileResponse)

	@handler DeleteFilesHandler
	delete /api/files (DeleteFilesRequest) returns (DeleteFilesResponse)

	@handler CreateDirectoryHandler
	post /api/files/directory (CreateDirectoryRequest) returns (CreateDirectoryResponse)

	@handler GetOneFileHandler
	get /api/files/:id (GetOneFileRequest) returns (FileDTO)

	@handler ShareFileHandler
	post /api/files/share/:id (ShareFileRequest) returns (ShareFileResponse)

	@handler DownloadSharedFileHandler
	get /api/files/shared/download/:uuid (DownloadSharedFileRequest) returns (DownloadSharedFileResponse)

	@handler GetSharedFileHandler
	get /api/files/shared/:uuid (GetSharedFileRequest) returns (ShareDTO)

	@handler DeleteSharedFileHandler
	delete /api/files/shared/:uuid (DeleteSharedFileRequest) returns (DeleteSharedFileResponse)

	@handler GetMySharedFilesHandler
	get /api/files/shared/mine returns ([]*ShareDTO)

	@handler SaveSharedFileHandler
	post /api/files/shared/save/:uuid (SaveSharedFileRequest) returns (SaveSharedFileResponse)

	@handler GetMyFilesHandler
	get /api/files/mine (GetMyFileRequest) returns ([]*FileDTO)
}

@server(
	jwt: Auth
	middleware: CheckBlackList
	timeout: 1800000ms
)
service disko-api {
	@handler FileUploadHandler
	post /api/files (FileUploadRequest) returns (FileUploadResponse)

	@handler FileDownloadHandler
	get /api/files/download/:uuid (FileDownloadRequest)
}