syntax = "v1"

type LoginRequest {
	Email    string `form:"email"`
	Password string `form:"password"`
}

type RegisterRequest {
	Name     string `form:"name"`
	Email    string `form:"email"`
	Password string `form:"password"`
	Vcode    string `form:"vcode"`
}

type Response {
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

type LoginResponse {
	Message  string `json:"message"`
	Ok       bool   `json:"ok"`
	Token    string `json:"token"`
	ExpireAt int64  `json:"expireAt"`
}

type RegisterResponse {
	Message string `json:"message"`
	Ok      bool   `json:"ok"`
}

type LogoutRequest {
	Token string `header:"Authorization"`
}

type LogoutResponse {
	Message string `json:"message"`
	Ok      bool   `json:"ok"`
}

type RegisterVcodeRequest {
	Email string `form:"email"`
}

type RegisterVcodeResponse {
	Message string `json:"message"`
	Ok      bool   `json:"ok"`
}

type FileUploadResponse {
	Message string `json:"message"`
	Ok      bool   `json:"ok"`
}

type FileUploadRequest {
	Parent *uint `form:"parent,optional"`
}

type FileDownloadRequest {
	UUID string `path:"uuid"`
}

type UserDTO {
	ID    uint   `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type FileDTO {
	Name    string `json:"name"`
	Ext     string `json:"ext"`
	Size    int64  `json:"size"`
	UUID    string `json:"uuid"`
	Owner   uint   `json:"owner"`
	IsDir   bool   `json:"isDir"`
	Private bool   `json:"private"`
}

type GetMyFileRequest {
	// parent dir uuid
	Parent     *uint    `form:"parent,optional"`
	Keyword    string   `form:"keyword,optional"`
	Extensions []string `form:"extensions,optional"`
}

service cloud-disk-api {
	@handler LoginHandler
	post /api/login (LoginRequest) returns (LoginResponse)

	@handler RegisterHandler
	post /api/register (RegisterRequest) returns (RegisterResponse)

	@handler RegisterVcodeHandler
	get /api/register/vcode (RegisterVcodeRequest) returns (RegisterVcodeResponse)
}

@server(
	jwt: Auth
	middleware: CheckBlackList
)

service cloud-disk-api {
	@handler MeHandler
	get /api/me returns (UserDTO)

	@handler LogoutHandler
	put /api/logout (LogoutRequest) returns (LogoutResponse)

	@handler FileUploadHandler
	post /api/files (FileUploadRequest) returns (FileUploadResponse)

	@handler FileDownloadHandler
	get /api/files/:uuid (FileDownloadRequest)

	@handler GetMyFilesHandler
	get /api/files/mine (GetMyFileRequest) returns ([]FileDTO)
}