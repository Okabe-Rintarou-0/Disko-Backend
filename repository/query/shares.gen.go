// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"disko/model"
)

func newShare(db *gorm.DB, opts ...gen.DOOption) share {
	_share := share{}

	_share.shareDo.UseDB(db, opts...)
	_share.shareDo.UseModel(&model.Share{})

	tableName := _share.shareDo.TableName()
	_share.ALL = field.NewAsterisk(tableName)
	_share.ID = field.NewUint(tableName, "id")
	_share.CreatedAt = field.NewTime(tableName, "created_at")
	_share.UpdatedAt = field.NewTime(tableName, "updated_at")
	_share.DeletedAt = field.NewField(tableName, "deleted_at")
	_share.UUID = field.NewString(tableName, "uuid")
	_share.Password = field.NewString(tableName, "password")
	_share.ExpireAt = field.NewField(tableName, "expire_at")
	_share.FileID = field.NewUint(tableName, "file_id")
	_share.UserID = field.NewUint(tableName, "user_id")
	_share.File = shareBelongsToFile{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("File", "model.File"),
		Parent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("File.Parent", "model.File"),
		},
	}

	_share.User = shareBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		Files: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.Files", "model.File"),
		},
	}

	_share.fillFieldMap()

	return _share
}

type share struct {
	shareDo shareDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UUID      field.String
	Password  field.String
	ExpireAt  field.Field
	FileID    field.Uint
	UserID    field.Uint
	File      shareBelongsToFile

	User shareBelongsToUser

	fieldMap map[string]field.Expr
}

func (s share) Table(newTableName string) *share {
	s.shareDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s share) As(alias string) *share {
	s.shareDo.DO = *(s.shareDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *share) updateTableName(table string) *share {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.UUID = field.NewString(table, "uuid")
	s.Password = field.NewString(table, "password")
	s.ExpireAt = field.NewField(table, "expire_at")
	s.FileID = field.NewUint(table, "file_id")
	s.UserID = field.NewUint(table, "user_id")

	s.fillFieldMap()

	return s
}

func (s *share) WithContext(ctx context.Context) IShareDo { return s.shareDo.WithContext(ctx) }

func (s share) TableName() string { return s.shareDo.TableName() }

func (s share) Alias() string { return s.shareDo.Alias() }

func (s share) Columns(cols ...field.Expr) gen.Columns { return s.shareDo.Columns(cols...) }

func (s *share) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *share) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["password"] = s.Password
	s.fieldMap["expire_at"] = s.ExpireAt
	s.fieldMap["file_id"] = s.FileID
	s.fieldMap["user_id"] = s.UserID

}

func (s share) clone(db *gorm.DB) share {
	s.shareDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s share) replaceDB(db *gorm.DB) share {
	s.shareDo.ReplaceDB(db)
	return s
}

type shareBelongsToFile struct {
	db *gorm.DB

	field.RelationField

	Parent struct {
		field.RelationField
	}
}

func (a shareBelongsToFile) Where(conds ...field.Expr) *shareBelongsToFile {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a shareBelongsToFile) WithContext(ctx context.Context) *shareBelongsToFile {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a shareBelongsToFile) Session(session *gorm.Session) *shareBelongsToFile {
	a.db = a.db.Session(session)
	return &a
}

func (a shareBelongsToFile) Model(m *model.Share) *shareBelongsToFileTx {
	return &shareBelongsToFileTx{a.db.Model(m).Association(a.Name())}
}

type shareBelongsToFileTx struct{ tx *gorm.Association }

func (a shareBelongsToFileTx) Find() (result *model.File, err error) {
	return result, a.tx.Find(&result)
}

func (a shareBelongsToFileTx) Append(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a shareBelongsToFileTx) Replace(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a shareBelongsToFileTx) Delete(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a shareBelongsToFileTx) Clear() error {
	return a.tx.Clear()
}

func (a shareBelongsToFileTx) Count() int64 {
	return a.tx.Count()
}

type shareBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	Files struct {
		field.RelationField
	}
}

func (a shareBelongsToUser) Where(conds ...field.Expr) *shareBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a shareBelongsToUser) WithContext(ctx context.Context) *shareBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a shareBelongsToUser) Session(session *gorm.Session) *shareBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a shareBelongsToUser) Model(m *model.Share) *shareBelongsToUserTx {
	return &shareBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type shareBelongsToUserTx struct{ tx *gorm.Association }

func (a shareBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a shareBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a shareBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a shareBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a shareBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a shareBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type shareDo struct{ gen.DO }

type IShareDo interface {
	gen.SubQuery
	Debug() IShareDo
	WithContext(ctx context.Context) IShareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShareDo
	WriteDB() IShareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShareDo
	Not(conds ...gen.Condition) IShareDo
	Or(conds ...gen.Condition) IShareDo
	Select(conds ...field.Expr) IShareDo
	Where(conds ...gen.Condition) IShareDo
	Order(conds ...field.Expr) IShareDo
	Distinct(cols ...field.Expr) IShareDo
	Omit(cols ...field.Expr) IShareDo
	Join(table schema.Tabler, on ...field.Expr) IShareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShareDo
	Group(cols ...field.Expr) IShareDo
	Having(conds ...gen.Condition) IShareDo
	Limit(limit int) IShareDo
	Offset(offset int) IShareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShareDo
	Unscoped() IShareDo
	Create(values ...*model.Share) error
	CreateInBatches(values []*model.Share, batchSize int) error
	Save(values ...*model.Share) error
	First() (*model.Share, error)
	Take() (*model.Share, error)
	Last() (*model.Share, error)
	Find() ([]*model.Share, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Share, err error)
	FindInBatches(result *[]*model.Share, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Share) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShareDo
	Assign(attrs ...field.AssignExpr) IShareDo
	Joins(fields ...field.RelationField) IShareDo
	Preload(fields ...field.RelationField) IShareDo
	FirstOrInit() (*model.Share, error)
	FirstOrCreate() (*model.Share, error)
	FindByPage(offset int, limit int) (result []*model.Share, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shareDo) Debug() IShareDo {
	return s.withDO(s.DO.Debug())
}

func (s shareDo) WithContext(ctx context.Context) IShareDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shareDo) ReadDB() IShareDo {
	return s.Clauses(dbresolver.Read)
}

func (s shareDo) WriteDB() IShareDo {
	return s.Clauses(dbresolver.Write)
}

func (s shareDo) Session(config *gorm.Session) IShareDo {
	return s.withDO(s.DO.Session(config))
}

func (s shareDo) Clauses(conds ...clause.Expression) IShareDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shareDo) Returning(value interface{}, columns ...string) IShareDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shareDo) Not(conds ...gen.Condition) IShareDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shareDo) Or(conds ...gen.Condition) IShareDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shareDo) Select(conds ...field.Expr) IShareDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shareDo) Where(conds ...gen.Condition) IShareDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shareDo) Order(conds ...field.Expr) IShareDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shareDo) Distinct(cols ...field.Expr) IShareDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shareDo) Omit(cols ...field.Expr) IShareDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shareDo) Join(table schema.Tabler, on ...field.Expr) IShareDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShareDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shareDo) RightJoin(table schema.Tabler, on ...field.Expr) IShareDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shareDo) Group(cols ...field.Expr) IShareDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shareDo) Having(conds ...gen.Condition) IShareDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shareDo) Limit(limit int) IShareDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shareDo) Offset(offset int) IShareDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShareDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shareDo) Unscoped() IShareDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shareDo) Create(values ...*model.Share) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shareDo) CreateInBatches(values []*model.Share, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shareDo) Save(values ...*model.Share) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shareDo) First() (*model.Share, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Share), nil
	}
}

func (s shareDo) Take() (*model.Share, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Share), nil
	}
}

func (s shareDo) Last() (*model.Share, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Share), nil
	}
}

func (s shareDo) Find() ([]*model.Share, error) {
	result, err := s.DO.Find()
	return result.([]*model.Share), err
}

func (s shareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Share, err error) {
	buf := make([]*model.Share, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shareDo) FindInBatches(result *[]*model.Share, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shareDo) Attrs(attrs ...field.AssignExpr) IShareDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shareDo) Assign(attrs ...field.AssignExpr) IShareDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shareDo) Joins(fields ...field.RelationField) IShareDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shareDo) Preload(fields ...field.RelationField) IShareDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shareDo) FirstOrInit() (*model.Share, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Share), nil
	}
}

func (s shareDo) FirstOrCreate() (*model.Share, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Share), nil
	}
}

func (s shareDo) FindByPage(offset int, limit int) (result []*model.Share, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shareDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shareDo) Delete(models ...*model.Share) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shareDo) withDO(do gen.Dao) *shareDo {
	s.DO = *do.(*gen.DO)
	return s
}
